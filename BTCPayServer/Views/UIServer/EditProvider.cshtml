@using BTCPayServer.Models.ServerViewModels
@model ProviderEditModel
@{
    ViewData.SetActivePage(ServerNavPages.CheckoutProviders, $"Edit Provider: {Model.ProviderName}");
}

<div class="row">
    <div class="col-lg-12">
        <h3 class="mb-4">@ViewData["Title"]</h3>
        
        <form method="post" action="/server/checkout-providers/provider/@Model.ProviderName">
            @Html.AntiForgeryToken()
            <div class="row">
                <!-- Provider Basic Info -->
                <div class="col-md-4">
                    <div class="card">
                        <div class="card-header">
                            <h5 class="card-title mb-0">Provider Details</h5>
                        </div>
                        <div class="card-body">
                            <div class="mb-3">
                                <label asp-for="Provider.Name" class="form-label">Provider Name</label>
                                <input asp-for="Provider.Name" class="form-control" readonly="@(Model.ProviderName != "add" && !string.IsNullOrEmpty(Model.ProviderName))" />
                                <span asp-validation-for="Provider.Name" class="text-danger"></span>
                                <div class="form-text">@(Model.ProviderName == "add" ? "Enter a unique provider name" : "Provider name cannot be changed")</div>
                            </div>
                            
                            <div class="mb-3">
                                <label asp-for="Provider.Icon" class="form-label">Icon Class</label>
                                <input asp-for="Provider.Icon" class="form-control" placeholder="fas fa-coins" />
                                <div class="form-text">Font Awesome icon class (e.g., fas fa-coins)</div>
                            </div>
                            
                            <div class="mb-3">
                                <label asp-for="Provider.ButtonClass" class="form-label">Button Style</label>
                                <select asp-for="Provider.ButtonClass" class="form-select">
                                    <option value="btn btn-primary">Primary (Blue)</option>
                                    <option value="btn btn-secondary">Secondary (Gray)</option>
                                    <option value="btn btn-success">Success (Green)</option>
                                    <option value="btn btn-warning">Warning (Yellow)</option>
                                    <option value="btn btn-danger">Danger (Red)</option>
                                    <option value="btn btn-outline-primary">Outline Primary</option>
                                    <option value="btn btn-outline-secondary">Outline Secondary</option>
                                </select>
                            </div>
                            
                            <div class="mb-3">
                                <label asp-for="Provider.FeeText" class="form-label">Fee Text</label>
                                <input asp-for="Provider.FeeText" class="form-control" placeholder="3-8% avgift" />
                                <div class="form-text">Display text for fees (e.g., "3-8% avgift")</div>
                            </div>
                            
                            <div class="mb-3">
                                <label asp-for="Provider.BadgeIcon" class="form-label">Badge Icon</label>
                                <input asp-for="Provider.BadgeIcon" class="form-control" placeholder="fas fa-star" />
                                <div class="form-text">Optional badge icon (e.g., fas fa-star)</div>
                            </div>
                        </div>
                    </div>

                    <!-- Country Availability -->
                    <div class="card mt-3">
                        <div class="card-header">
                            <h5 class="card-title mb-0">Country Availability</h5>
                        </div>
                        <div class="card-body">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" name="Provider.EnabledCountries" value="Norway" 
                                       @(Model.Provider.EnabledCountries?.Contains("Norway") == true ? "checked" : "") />
                                <label class="form-check-label">
                                    <i class="flag-icon flag-icon-no me-2"></i>Norway
                                </label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" name="Provider.EnabledCountries" value="Sweden" 
                                       @(Model.Provider.EnabledCountries?.Contains("Sweden") == true ? "checked" : "") />
                                <label class="form-check-label">
                                    <i class="flag-icon flag-icon-se me-2"></i>Sweden
                                </label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" name="Provider.EnabledCountries" value="Denmark" 
                                       @(Model.Provider.EnabledCountries?.Contains("Denmark") == true ? "checked" : "") />
                                <label class="form-check-label">
                                    <i class="flag-icon flag-icon-dk me-2"></i>Denmark
                                </label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" name="Provider.EnabledCountries" value="Other" 
                                       @(Model.Provider.EnabledCountries?.Contains("Other") == true ? "checked" : "") />
                                <label class="form-check-label">
                                    <i class="fas fa-globe me-2"></i>Other Countries
                                </label>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Provider Translations -->
                <div class="col-md-8">
                    <div class="card">
                        <div class="card-header">
                            <h5 class="card-title mb-0">Provider Translations</h5>
                        </div>
                        <div class="card-body">
                            <!-- Language Tabs -->
                            <ul class="nav nav-tabs" id="providerTabs" role="tablist">
                                <li class="nav-item" role="presentation">
                                    <button class="nav-link active" id="intro-tab" data-bs-toggle="tab" data-bs-target="#intro" type="button" role="tab">
                                        <i class="fas fa-info-circle me-2"></i>Intro Text
                                    </button>
                                </li>
                                <li class="nav-item" role="presentation">
                                    <button class="nav-link" id="steps-tab" data-bs-toggle="tab" data-bs-target="#steps" type="button" role="tab">
                                        <i class="fas fa-list-ol me-2"></i>Steps (@Model.Provider.Translations.Steps.Count)
                                    </button>
                                </li>
                                <li class="nav-item" role="presentation">
                                    <button class="nav-link" id="outro-tab" data-bs-toggle="tab" data-bs-target="#outro" type="button" role="tab">
                                        <i class="fas fa-sign-out-alt me-2"></i>Outro Text
                                    </button>
                                </li>
                            </ul>

                            <div class="tab-content mt-3" id="providerTabContent">
                                <!-- Intro Text -->
                                <div class="tab-pane fade show active" id="intro" role="tabpanel">
                                    <div class="row">
                                        <div class="col-md-6">
                                            <h6><i class="flag-icon flag-icon-gb me-2"></i>English</h6>
                                            <textarea asp-for="Provider.Translations.IntroText.English" class="form-control" rows="8" 
                                                      placeholder="Enter intro text in English..."></textarea>
                                        </div>
                                        <div class="col-md-6">
                                            <h6><i class="flag-icon flag-icon-no me-2"></i>Norwegian</h6>
                                            <textarea asp-for="Provider.Translations.IntroText.Norwegian" class="form-control" rows="8" 
                                                      placeholder="Enter intro text in Norwegian..."></textarea>
                                        </div>
                                    </div>
                                    <div class="row mt-3">
                                        <div class="col-md-6">
                                            <h6><i class="flag-icon flag-icon-se me-2"></i>Swedish</h6>
                                            <textarea asp-for="Provider.Translations.IntroText.Swedish" class="form-control" rows="8" 
                                                      placeholder="Enter intro text in Swedish..."></textarea>
                                        </div>
                                        <div class="col-md-6">
                                            <h6><i class="flag-icon flag-icon-dk me-2"></i>Danish</h6>
                                            <textarea asp-for="Provider.Translations.IntroText.Danish" class="form-control" rows="8" 
                                                      placeholder="Enter intro text in Danish..."></textarea>
                                        </div>
                                    </div>
                                </div>

                                <!-- Steps -->
                                <div class="tab-pane fade" id="steps" role="tabpanel">
                                    <div class="d-flex justify-content-between align-items-center mb-3">
                                        <h6>Provider Steps</h6>
                                        <button type="button" class="btn btn-sm btn-outline-primary" onclick="addStep()">
                                            <i class="fas fa-plus me-1"></i>Add Step
                                        </button>
                                    </div>
                                    
                                    <div id="steps-container">
                                        @for (int i = 0; i < Model.Provider.Translations.Steps.Count; i++)
                                        {
                                            <div class="card mb-3 step-item" data-step="@Model.Provider.Translations.Steps[i].StepNumber">
                                                <div class="card-header d-flex justify-content-between align-items-center">
                                                    <h6 class="mb-0">Step @Model.Provider.Translations.Steps[i].StepNumber</h6>
                                                    <button type="button" class="btn btn-sm btn-outline-danger" onclick="removeStep(@Model.Provider.Translations.Steps[i].StepNumber)">
                                                        <i class="fas fa-trash"></i>
                                                    </button>
                                                </div>
                                                <div class="card-body">
                                                    <input type="hidden" name="Provider.Translations.Steps[@i].StepNumber" value="@Model.Provider.Translations.Steps[i].StepNumber" />
                                                    <div class="row">
                                                <div class="col-md-6">
                                                    <div class="d-flex justify-content-between align-items-center mb-2">
                                                        <h6><i class="flag-icon flag-icon-gb me-2"></i>English</h6>
                                                        <button type="button" class="btn btn-sm btn-outline-info insert-calculation-btn" data-textarea="Provider.Translations.Steps[@i].StepText.English">
                                                            <i class="fas fa-calculator me-1"></i>Insert Calculation
                                                        </button>
                                                    </div>
                                                    <textarea name="Provider.Translations.Steps[@i].StepText.English" class="form-control" rows="4">@Model.Provider.Translations.Steps[i].StepText.English</textarea>
                                                </div>
                                                        <div class="col-md-6">
                                                            <div class="d-flex justify-content-between align-items-center mb-2">
                                                                <h6><i class="flag-icon flag-icon-no me-2"></i>Norwegian</h6>
                                                                <button type="button" class="btn btn-sm btn-outline-info insert-calculation-btn" data-textarea="Provider.Translations.Steps[@i].StepText.Norwegian">
                                                                    <i class="fas fa-calculator me-1"></i>Insert Calculation
                                                                </button>
                                                            </div>
                                                            <textarea name="Provider.Translations.Steps[@i].StepText.Norwegian" class="form-control" rows="4">@Model.Provider.Translations.Steps[i].StepText.Norwegian</textarea>
                                                        </div>
                                                    </div>
                                                    <div class="row mt-2">
                                                        <div class="col-md-6">
                                                            <div class="d-flex justify-content-between align-items-center mb-2">
                                                                <h6><i class="flag-icon flag-icon-se me-2"></i>Swedish</h6>
                                                                <button type="button" class="btn btn-sm btn-outline-info insert-calculation-btn" data-textarea="Provider.Translations.Steps[@i].StepText.Swedish">
                                                                    <i class="fas fa-calculator me-1"></i>Insert Calculation
                                                                </button>
                                                            </div>
                                                            <textarea name="Provider.Translations.Steps[@i].StepText.Swedish" class="form-control" rows="4">@Model.Provider.Translations.Steps[i].StepText.Swedish</textarea>
                                                        </div>
                                                        <div class="col-md-6">
                                                            <div class="d-flex justify-content-between align-items-center mb-2">
                                                                <h6><i class="flag-icon flag-icon-dk me-2"></i>Danish</h6>
                                                                <button type="button" class="btn btn-sm btn-outline-info insert-calculation-btn" data-textarea="Provider.Translations.Steps[@i].StepText.Danish">
                                                                    <i class="fas fa-calculator me-1"></i>Insert Calculation
                                                                </button>
                                                            </div>
                                                            <textarea name="Provider.Translations.Steps[@i].StepText.Danish" class="form-control" rows="4">@Model.Provider.Translations.Steps[i].StepText.Danish</textarea>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                </div>

                                <!-- Outro Text -->
                                <div class="tab-pane fade" id="outro" role="tabpanel">
                                    <div class="row">
                                        <div class="col-md-6">
                                            <h6><i class="flag-icon flag-icon-gb me-2"></i>English</h6>
                                            <textarea asp-for="Provider.Translations.OutroText.English" class="form-control" rows="8" 
                                                      placeholder="Enter outro text in English..."></textarea>
                                        </div>
                                        <div class="col-md-6">
                                            <h6><i class="flag-icon flag-icon-no me-2"></i>Norwegian</h6>
                                            <textarea asp-for="Provider.Translations.OutroText.Norwegian" class="form-control" rows="8" 
                                                      placeholder="Enter outro text in Norwegian..."></textarea>
                                        </div>
                                    </div>
                                    <div class="row mt-3">
                                        <div class="col-md-6">
                                            <h6><i class="flag-icon flag-icon-se me-2"></i>Swedish</h6>
                                            <textarea asp-for="Provider.Translations.OutroText.Swedish" class="form-control" rows="8" 
                                                      placeholder="Enter outro text in Swedish..."></textarea>
                                        </div>
                                        <div class="col-md-6">
                                            <h6><i class="flag-icon flag-icon-dk me-2"></i>Danish</h6>
                                            <textarea asp-for="Provider.Translations.OutroText.Danish" class="form-control" rows="8" 
                                                      placeholder="Enter outro text in Danish..."></textarea>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Calculations -->
                    <div class="card mt-3">
                        <div class="card-header">
                            <h5 class="card-title mb-0">Calculations</h5>
                        </div>
                        <div class="card-body">
                            <p class="text-muted mb-3">Configure dynamic calculations that can be used in any step text</p>
                            
                            <div class="card bg-light">
                                <div class="card-body">
                                    <h6><i class="fas fa-info-circle me-2"></i>Available srvModel Variables & Examples</h6>
                                    <div class="row">
                                        <div class="col-md-4">
                                            <strong>Available variables:</strong><br>
                                            • <code>srvModel.orderAmountFiat</code> - Order amount in fiat currency (e.g., "1,000.00 kr")<br>
                                            • <code>srvModel.rate</code> - Bitcoin exchange rate (e.g., "45,000.00")<br>
                                            • <code>srvModel.due</code> - Amount due in BTC (e.g., "0.02222222")<br>
                                            • <code>srvModel.paid</code> - Amount paid in BTC (e.g., "0.01111111")<br>
                                            • <code>srvModel.paymentMethodCurrency</code> - Currency code (e.g., "BTC")<br>
                                            • <code>srvModel.address</code> - Bitcoin address for payment<br>
                                            • <code>srvModel.feeRate</code> - Recommended fee rate<br>
                                            • <code>srvModel.totalDue</code> - Total amount due
                                        </div>
                                        <div class="col-md-4">
                                            <strong>Safello Examples:</strong><br>
                                            <strong>Dynamic Amount:</strong><br>
                                            <code>(parseFloat(srvModel.orderAmountFiat.replace(/[^0-9.]/g, '')) / 100 * 1.05) + (0.00025 * parseFloat(srvModel.rate.replace(/[^0-9.]/g, '')) / 100) + 20</code>
                                            <br><br>
                                            <strong>Amount Due:</strong><br>
                                            <code>parseFloat(srvModel.due)</code>
                                        </div>
                                        <div class="col-md-4">
                                            <strong>Display Format:</strong><br>
                                            <small class="text-muted">HTML template for how to display the calculated result. Use <code>{{result}}</code> as placeholder for the calculated value.</small>
                                            <br><br>
                                            <strong>Placeholder Format:</strong><br>
                                            <code>{{calc_[stepNumber]_[type]_[providerName]}}</code>
                                            <br><br>
                                            <strong>Example Display Format:</strong><br>
                                            <code><b>{{result}} kr</b></code>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            
                            <div id="calculations-container">
                                @for (int i = 0; i < Model.Calculations.Steps.Count; i++)
                                {
                                    <div class="card mb-3 calculation-item" data-step="@Model.Calculations.Steps[i].StepNumber">
                                        <div class="card-header d-flex justify-content-between align-items-center">
                                            <h6 class="mb-0">Step @Model.Calculations.Steps[i].StepNumber Calculation</h6>
                                            <button type="button" class="btn btn-sm btn-outline-danger" onclick="removeCalculation(@Model.Calculations.Steps[i].StepNumber)">
                                                <i class="fas fa-trash"></i>
                                            </button>
                                        </div>
                                        <div class="card-body">
                                            <input type="hidden" name="Calculations.Steps[@i].StepNumber" value="@Model.Calculations.Steps[i].StepNumber" />
                                            <div class="row">
                                                <div class="col-md-6">
                                                    <div class="mb-3">
                                                        <label class="form-label">Calculation Type</label>
                                                        <select name="Calculations.Steps[@i].CalculationType" class="form-select">
                                                            <option value="amount_due" selected="@(Model.Calculations.Steps[i].CalculationType == "amount_due")">Amount Due</option>
                                                            <option value="dynamic_amount" selected="@(Model.Calculations.Steps[i].CalculationType == "dynamic_amount")">Dynamic Amount</option>
                                                            <option value="custom" selected="@(Model.Calculations.Steps[i].CalculationType == "custom")">Custom Formula</option>
                                                        </select>
                                                    </div>
                                                </div>
                                                <div class="col-md-6">
                                                    <div class="mb-3">
                                                        <label class="form-label">Display Format</label>
                                                        <input name="Calculations.Steps[@i].DisplayFormat" class="form-control" 
                                                               value="@Model.Calculations.Steps[i].DisplayFormat" 
                                                               placeholder="HTML template with {{result}} placeholder" />
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="mb-3">
                                                <label class="form-label">Formula</label>
                                                <textarea name="Calculations.Steps[@i].CalculationFormula" class="form-control" rows="3" 
                                                          placeholder="JavaScript-like formula using srvModel properties">@Model.Calculations.Steps[i].CalculationFormula</textarea>
                                                <div class="form-text">Use the variables listed above in your formula.</div>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                            
                            <button type="button" class="btn btn-outline-primary" onclick="addCalculation()">
                                <i class="fas fa-plus me-1"></i>Add Calculation
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Action Buttons -->
            <div class="row mt-4">
                <div class="col-md-12">
                    <div class="card">
                        <div class="card-body">
                            <div class="d-flex justify-content-between">
                                <a asp-action="CheckoutContent" class="btn btn-secondary">
                                    <i class="fas fa-arrow-left me-2"></i>Back to Overview
                                </a>
                                <div>
                                    <button type="button" class="btn btn-outline-info me-2" onclick="previewProvider()">
                                        <i class="fas fa-eye me-2"></i>Preview
                                    </button>
                                    <button type="submit" class="btn btn-primary">
                                        <i class="fas fa-save me-2"></i>Save Provider
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Form Actions -->
            <div class="card mt-4">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <button type="submit" class="btn btn-primary me-2">
                                <i class="fas fa-save me-2"></i>Save Provider
                            </button>
                            <a href="/server/checkout-content" class="btn btn-secondary">
                                <i class="fas fa-arrow-left me-2"></i>Back to Content
                            </a>
                        </div>
                        @if (!string.IsNullOrEmpty(Model.ProviderName) && Model.ProviderName != "add")
                        {
                            <div>
                                <button type="button" class="btn btn-outline-danger" onclick="deleteProvider('@Model.ProviderName')">
                                    <i class="fas fa-trash me-2"></i>Delete Provider
                                </button>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </form>
    </div>
</div>

<script>
let stepCounter = @Model.Provider.Translations.Steps.Count;
let calculationCounter = @Model.Calculations.Steps.Count;

function addStep() {
    stepCounter++;
    const stepHtml = `
        <div class="card mb-3 step-item" data-step="${stepCounter}">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h6 class="mb-0">Step ${stepCounter}</h6>
                <button type="button" class="btn btn-sm btn-outline-danger" onclick="removeStep(${stepCounter})">
                    <i class="fas fa-trash"></i>
                </button>
            </div>
            <div class="card-body">
                <input type="hidden" name="Provider.Translations.Steps[${stepCounter-1}].StepNumber" value="${stepCounter}" />
                <div class="row">
                    <div class="col-md-6">
                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <h6><i class="flag-icon flag-icon-gb me-2"></i>English</h6>
                            <button type="button" class="btn btn-sm btn-outline-info insert-calculation-btn" data-textarea="Provider.Translations.Steps[${stepCounter-1}].StepText.English">
                                <i class="fas fa-calculator me-1"></i>Insert Calculation
                            </button>
                        </div>
                        <textarea name="Provider.Translations.Steps[${stepCounter-1}].StepText.English" class="form-control" rows="4"></textarea>
                    </div>
                    <div class="col-md-6">
                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <h6><i class="flag-icon flag-icon-no me-2"></i>Norwegian</h6>
                            <button type="button" class="btn btn-sm btn-outline-info insert-calculation-btn" data-textarea="Provider.Translations.Steps[${stepCounter-1}].StepText.Norwegian">
                                <i class="fas fa-calculator me-1"></i>Insert Calculation
                            </button>
                        </div>
                        <textarea name="Provider.Translations.Steps[${stepCounter-1}].StepText.Norwegian" class="form-control" rows="4"></textarea>
                    </div>
                </div>
                <div class="row mt-2">
                    <div class="col-md-6">
                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <h6><i class="flag-icon flag-icon-se me-2"></i>Swedish</h6>
                            <button type="button" class="btn btn-sm btn-outline-info insert-calculation-btn" data-textarea="Provider.Translations.Steps[${stepCounter-1}].StepText.Swedish">
                                <i class="fas fa-calculator me-1"></i>Insert Calculation
                            </button>
                        </div>
                        <textarea name="Provider.Translations.Steps[${stepCounter-1}].StepText.Swedish" class="form-control" rows="4"></textarea>
                    </div>
                    <div class="col-md-6">
                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <h6><i class="flag-icon flag-icon-dk me-2"></i>Danish</h6>
                            <button type="button" class="btn btn-sm btn-outline-info insert-calculation-btn" data-textarea="Provider.Translations.Steps[${stepCounter-1}].StepText.Danish">
                                <i class="fas fa-calculator me-1"></i>Insert Calculation
                            </button>
                        </div>
                        <textarea name="Provider.Translations.Steps[${stepCounter-1}].StepText.Danish" class="form-control" rows="4"></textarea>
                    </div>
                </div>
            </div>
        </div>
    `;
    document.getElementById('steps-container').insertAdjacentHTML('beforeend', stepHtml);
    updateStepsTab();
}

function removeStep(stepNumber) {
    if (confirm(`Are you sure you want to remove step ${stepNumber}?`)) {
        document.querySelector(`[data-step="${stepNumber}"]`).remove();
        updateStepsTab();
    }
}

function addCalculation() {
    calculationCounter++;
    const calculationHtml = `
        <div class="card mb-3 calculation-item" data-step="${calculationCounter}">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h6 class="mb-0">Step ${calculationCounter} Calculation</h6>
                <button type="button" class="btn btn-sm btn-outline-danger" onclick="removeCalculation(${calculationCounter})">
                    <i class="fas fa-trash"></i>
                </button>
            </div>
            <div class="card-body">
                <input type="hidden" name="Calculations.Steps[${calculationCounter-1}].StepNumber" value="${calculationCounter}" />
                <div class="row">
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label class="form-label">Calculation Type</label>
                            <select name="Calculations.Steps[${calculationCounter-1}].CalculationType" class="form-select" onchange="updateCalculationFormula(this)">
                                <option value="amount_due">Amount Due</option>
                                <option value="dynamic_amount">Dynamic Amount</option>
                                <option value="custom">Custom Formula</option>
                            </select>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label class="form-label">Display Format</label>
                            <input name="Calculations.Steps[${calculationCounter-1}].DisplayFormat" class="form-control" 
                                   placeholder="HTML template with {{result}} placeholder" />
                        </div>
                    </div>
                </div>
                <div class="mb-3">
                    <label class="form-label">Formula</label>
                    <textarea name="Calculations.Steps[${calculationCounter-1}].CalculationFormula" class="form-control" rows="3" 
                              placeholder="JavaScript-like formula using srvModel properties"></textarea>
                    <div class="form-text">Use the variables listed above in your formula.</div>
                </div>
            </div>
        </div>
    `;
    document.getElementById('calculations-container').insertAdjacentHTML('beforeend', calculationHtml);
}

function removeCalculation(stepNumber) {
    if (confirm(`Are you sure you want to remove calculation for step ${stepNumber}?`)) {
        document.querySelector(`.calculation-item[data-step="${stepNumber}"]`).remove();
    }
}

function updateStepsTab() {
    const stepCount = document.querySelectorAll('.step-item').length;
    document.querySelector('#steps-tab').innerHTML = `<i class="fas fa-list-ol me-2"></i>Steps (${stepCount})`;
}

function previewProvider() {
    // Simple preview - could be enhanced
    alert('Provider preview functionality would be implemented here');
}

function deleteProvider(providerName) {
    if (confirm(`Are you sure you want to delete the provider "${providerName}"? This action cannot be undone.`)) {
        // Create a form to submit the delete request
        const form = document.createElement('form');
        form.method = 'POST';
        form.action = '/server/checkout-providers/provider/' + providerName + '/delete';
        
        // Add anti-forgery token
        const token = document.querySelector('input[name="__RequestVerificationToken"]');
        if (token) {
            const tokenInput = document.createElement('input');
            tokenInput.type = 'hidden';
            tokenInput.name = '__RequestVerificationToken';
            tokenInput.value = token.value;
            form.appendChild(tokenInput);
        }
        
        document.body.appendChild(form);
        form.submit();
    }
}

function updateCalculationFormula(selectElement) {
    const calculationType = selectElement.value;
    const cardBody = selectElement.closest('.card-body');
    const formulaTextarea = cardBody.querySelector('textarea[name*="CalculationFormula"]');
    const displayFormatInput = cardBody.querySelector('input[name*="DisplayFormat"]');
    
    if (!formulaTextarea) return;
    
    // Set default formulas based on calculation type
    const formulas = {
        'amount_due': 'srvModel.orderAmountFiat',
        'dynamic_amount': '(parseFloat(srvModel.orderAmountFiat.replace(/[^0-9.]/g, \'\')) / 100 * 1.05) + (0.00025 * parseFloat(srvModel.rate.replace(/[^0-9.]/g, \'\')) / 100) + 20',
        'custom': 'srvModel.orderAmountFiat'
    };
    
    const displayFormats = {
        'amount_due': '{{$t(\'pmnt_due_amount\')}}: <b>{{result}} kr</b>',
        'dynamic_amount': '{{$t(\'pmnt_dynamic_amount\')}}: <b>{{result}} kr</b>',
        'custom': 'Amount: <b>{{result}}</b>'
    };
    
    if (formulas[calculationType]) {
        formulaTextarea.value = formulas[calculationType];
    }
    
    if (displayFormats[calculationType] && displayFormatInput) {
        displayFormatInput.value = displayFormats[calculationType];
    }
}

// Initialize calculation formulas on page load
document.addEventListener('DOMContentLoaded', function() {
    // Auto-fill existing calculation forms
    const calculationSelects = document.querySelectorAll('select[name*="CalculationType"]');
    calculationSelects.forEach(select => {
        if (select.value && !select.closest('.card-body').querySelector('textarea[name*="CalculationFormula"]').value) {
            updateCalculationFormula(select);
        }
    });
    
    // Add event listeners for Insert Calculation buttons
    document.addEventListener('click', function(e) {
        if (e.target.classList.contains('insert-calculation-btn') || e.target.closest('.insert-calculation-btn')) {
            const button = e.target.classList.contains('insert-calculation-btn') ? e.target : e.target.closest('.insert-calculation-btn');
            const textareaName = button.getAttribute('data-textarea');
            showCalculationModal(textareaName);
        }
    });
});

let currentTextarea = null;

function showCalculationModal(textareaName) {
    currentTextarea = document.querySelector(`textarea[name="${textareaName}"]`);
    if (!currentTextarea) {
        console.error('Textarea not found:', textareaName);
        return;
    }
    
    // Get available calculations
    const calculations = getAvailableCalculations();
    
    if (calculations.length === 0) {
        alert('No calculations available. Please add calculations first in the Step Calculations section.');
        return;
    }
    
    // Create modal HTML
    const modalHtml = `
        <div class="modal fade" id="calculationModal" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Insert Calculation</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <p>Select a calculation to insert into the step text:</p>
                        <div class="list-group">
                            ${calculations.map(calc => `
                                <button type="button" class="list-group-item list-group-item-action calculation-option-btn" data-placeholder="${calc.placeholder}">
                                    <div class="d-flex justify-content-between">
                                        <div>
                                            <strong>Step ${calc.stepNumber} - ${calc.type}</strong><br>
                                            <small class="text-muted">${calc.description}</small>
                                        </div>
                                        <div>
                                            <code>${calc.placeholder}</code>
                                        </div>
                                    </div>
                                </button>
                            `).join('')}
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
    `;
    
    // Remove existing modal if any
    const existingModal = document.getElementById('calculationModal');
    if (existingModal) {
        existingModal.remove();
    }
    
    // Add modal to page
    document.body.insertAdjacentHTML('beforeend', modalHtml);
    
    // Show modal using jQuery or vanilla JS
    const modalElement = document.getElementById('calculationModal');
    const modal = new bootstrap.Modal(modalElement);
    modal.show();
    
    // Add event listeners for calculation option buttons
    modalElement.addEventListener('click', function(e) {
        if (e.target.classList.contains('calculation-option-btn') || e.target.closest('.calculation-option-btn')) {
            const button = e.target.classList.contains('calculation-option-btn') ? e.target : e.target.closest('.calculation-option-btn');
            const placeholder = button.getAttribute('data-placeholder');
            insertCalculation(placeholder);
        }
    });
}

function getAvailableCalculations() {
    const calculations = [];
    const calculationItems = document.querySelectorAll('.calculation-item');
    const providerNameInput = document.querySelector('input[name="Provider.Name"]');
    const providerName = providerNameInput?.value || 'NewProvider';
    
    calculationItems.forEach(item => {
        const stepNumber = item.querySelector('input[name*="StepNumber"]')?.value;
        const calculationType = item.querySelector('select[name*="CalculationType"]')?.value;
        const formula = item.querySelector('textarea[name*="CalculationFormula"]')?.value;
        const displayFormat = item.querySelector('input[name*="DisplayFormat"]')?.value;
        
        if (stepNumber && calculationType && formula) {
            calculations.push({
                stepNumber: stepNumber,
                type: calculationType,
                formula: formula,
                displayFormat: displayFormat || '{{result}}',
                placeholder: `{{calc_${stepNumber}_${calculationType}_${providerName}}}`,
                description: getCalculationDescription(calculationType, formula)
            });
        }
    });
    
    return calculations;
}

function getCalculationDescription(type, formula) {
    switch (type) {
        case 'amount_due':
            return 'Shows the amount due from the invoice';
        case 'dynamic_amount':
            return 'Dynamic amount calculation';
        case 'custom':
            return `Custom formula: ${formula.substring(0, 50)}${formula.length > 50 ? '...' : ''}`;
        default:
            return 'Custom calculation';
    }
}

function insertCalculation(placeholder) {
    if (currentTextarea) {
        const currentValue = currentTextarea.value;
        const cursorPos = currentTextarea.selectionStart || currentTextarea.value.length;
        const newValue = currentValue.substring(0, cursorPos) + placeholder + currentValue.substring(cursorPos);
        currentTextarea.value = newValue;
        
        // Set cursor position after the inserted text
        const newCursorPos = cursorPos + placeholder.length;
        currentTextarea.selectionStart = currentTextarea.selectionEnd = newCursorPos;
        currentTextarea.focus();
        
        // Trigger change event to ensure form validation works
        currentTextarea.dispatchEvent(new Event('change', { bubbles: true }));
    }
    
    // Close modal
    const modalElement = document.getElementById('calculationModal');
    if (modalElement) {
        const modal = bootstrap.Modal.getInstance(modalElement);
        if (modal) {
            modal.hide();
        } else {
            // Fallback: remove modal manually
            modalElement.remove();
        }
    }
}
</script>